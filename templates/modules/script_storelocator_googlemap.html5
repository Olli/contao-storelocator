<script>

    var map;
    var markers = [];

    function initMapControls() {

    }

    function updateMarkers() {

        var bounds = map.getBounds();

        if( typeof(bounds) == "undefined" )
            return;

        var sw = bounds.getSouthWest();
        var ne = bounds.getNorthEast();

        jQuery.ajax({
            url: ''
        ,   data: {
                'action': 'getMarkers'
    <?php if($this->storelocator_show_all_stores_on_map): ?>
            ,   'fromlat': sw.lat()
            ,   'tolat': ne.lat()
            ,   'fromlng': sw.lng()
            ,   'tolng': ne.lng()
    <?php else: ?>
            ,   'lat': <?= $this->mapLat; ?>
            ,   'lng': <?= $this->mapLng; ?>
    <?php endif;?>
            ,   'REQUEST_TOKEN': "{{request_token}}"
            }
        ,   dataType: 'json'
        ,   type: 'GET'
        ,   async: false
        ,   success: function( response ) {

                if( response ) {

                    // for( var i = 0; i < markers.length; i++) {
                    //     markers[i].setMap(null);
                    // }
                    // markers = [];

                    // use markers from db settings
                    var markerImages = {
                        <?php foreach( $this->mapPins as $key => $value ): ?>
                            "<?= $key; ?>" : {
                            url: "<?= $value; ?>",
                            size: new google.maps.Size(108, 150),
                            scaledSize: new google.maps.Size(36, 36),
                            origin: new google.maps.Point(0, 0),
                            anchor: new google.maps.Point(18, 50)
                        },
                        <?php endforeach; ?>
                    };

                    // insert new markers
                    jQuery.each(response, function (i, item) {

                        if( item.id in markers ){
                            return;
                        }

                        if( item.pid in markerImages ) {

                            var markerImage = markerImages[item.pid];
                        } else {
                            if( 'default' in markerImages ){
                                var markerImage = markerImages['default'];
                            }
                        }

                        marker = new google.maps.Marker({
                                position: new google.maps.LatLng(item.lat, item.lng),
                                map: map,
                                icon: markerImage,
                                draggable: false,
                                data: item
                            });
                        markers[item.id] = marker;

                    <?php if( in_array($this->storelocator_map_interaction , array("showMarkerInfo", "scrollToListElement")) ): ?>
                        marker.addListener('click', function(){

                            <?php if( $this->storelocator_map_interaction == "showMarkerInfo" ): ?>
                            // TODO
                            <?php elseif( $this->storelocator_map_interaction == "scrollToListElement" ): ?>
                                document.location.hash = "#result_"+this.data.id;
                            <?php endif;?>
                        });
                    <?php endif;?>

                    });
                }
            }
        });
    }

    function initializeGoogleMap() {

        var position = new google.maps.LatLng(<?= $this->mapLat; ?>, <?= $this->mapLng; ?>);

        var mapOptions = {
            minZoom: 5,
            maxZoom: 20,
            zoom: 8,
            center: position
        }

        map = new google.maps.Map(document.getElementById('map-canvas'), mapOptions);
        map.addListener('projection_changed', updateMarkers);


<?php if($this->storelocator_show_all_stores_on_map): ?>
        map.addListener('zoom_changed', updateMarkers);
        map.addListener('dragend', updateMarkers);
        map.addListener('tilt_changed', updateMarkers);
<?php endif; ?>

        initMapControls();
    }
    <?php if($this->loadedMapsApi): ?>
    var busyWait = function(){
        if( typeof google.maps.Map !== undefined){
            initializeGoogleMap();
        } else {
            setTimeout(busyWait,300);
        }
    };
    setTimeout(busyWait,300);
    <?php endif; ?>
</script>

<?php if(!$this->loadedMapsApi): ?>
<script src="https://maps.googleapis.com/maps/api/js?key=<?= $this->mapsKey; ?>&amp;callback=initializeGoogleMap" async defer></script>
<?php endif; ?>
